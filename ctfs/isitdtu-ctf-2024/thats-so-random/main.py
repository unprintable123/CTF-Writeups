from z3 import *
from random import Random
from itertools import count
from time import time
import logging
import os, json

os.chdir(os.path.dirname(os.path.abspath(__file__)))

logging.basicConfig(format='STT> %(message)s')
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

SYMBOLIC_COUNTER = count()

class Untwister:
    def __init__(self):
        name = next(SYMBOLIC_COUNTER)
        self.MT = [BitVec(f'MT_{i}_{name}', 32) for i in range(624)]
        self.init_MT = self.MT[:]
        self.index = 0
        self.solver = Solver()

    #This particular method was adapted from https://www.schutzwerk.com/en/43/posts/attacking_a_random_number_generator/
    def symbolic_untamper(self, solver, y):
        name = next(SYMBOLIC_COUNTER)

        y1 = BitVec(f'y1_{name}', 32)
        y2 = BitVec(f'y2_{name}' , 32)
        y3 = BitVec(f'y3_{name}', 32)
        y4 = BitVec(f'y4_{name}', 32)

        equations = [
            y2 == y1 ^ (LShR(y1, 11)),
            y3 == y2 ^ ((y2 << 7) & 0x9D2C5680),
            y4 == y3 ^ ((y3 << 15) & 0xEFC60000),
            y == y4 ^ (LShR(y4, 18))
        ]

        solver.add(equations)
        return y1

    def symbolic_twist(self, MT, n=624, upper_mask=0x80000000, lower_mask=0x7FFFFFFF, a=0x9908B0DF, m=397):
        '''
            This method models MT19937 function as a Z3 program
        '''
        MT = [i for i in MT] #Just a shallow copy of the state

        for i in range(n):
            x = (MT[i] & upper_mask) + (MT[(i+1) % n] & lower_mask)
            xA = LShR(x, 1)
            xB = If(x & 1 == 0, xA, xA ^ a) #Possible Z3 optimization here by declaring auxiliary symbolic variables
            MT[i] = MT[(i + m) % n] ^ xB

        return MT

    def get_symbolic(self, guess):
        name = next(SYMBOLIC_COUNTER)
        ERROR = 'Must pass a string like "?1100???1001000??0?100?10??10010" where ? represents an unknown bit'

        assert type(guess) == str, ERROR
        assert all(map(lambda x: x in '01?', guess)), ERROR
        assert len(guess) <= 32, "One 32-bit number at a time please"
        guess = guess.zfill(32)

        self.symbolic_guess = BitVec(f'symbolic_guess_{name}', 32)
        guess = guess[::-1]

        for i, bit in enumerate(guess):
            if bit != '?':
                self.solver.add(Extract(i, i, self.symbolic_guess) == bit)

        return self.symbolic_guess


    def submit(self, guess):
        '''
            You need 624 numbers to completely clone the state.
                You can input less than that though and this will give you the best guess for the state
        '''
        assert len(guess) == 32, "Must pass a 32-bit number"
        if self.index >= 624:
            name = next(SYMBOLIC_COUNTER)
            next_mt = self.symbolic_twist(self.MT)
            self.MT = [BitVec(f'MT_{i}_{name}', 32) for i in range(624)]
            for i in range(624):
                self.solver.add(self.MT[i] == next_mt[i])
            self.index = 0

        symbolic_guess = self.get_symbolic(guess)
        symbolic_guess = self.symbolic_untamper(self.solver, symbolic_guess)
        self.solver.add(self.MT[self.index] == symbolic_guess)
        self.index += 1

    def get_init_state(self):
        '''
            This will give you a random.Random() instance with the cloned state.
        '''
        logger.debug('Solving...')
        start = time()
        print(self.solver.check())
        model = self.solver.model()
        end = time()
        logger.debug(f'Solved! (in {round(end-start,3)}s)')

        #Compute best guess for state
        state = list(map(lambda x: model[x].as_long(), self.init_MT))

        return state

    def get_random(self):
        '''
            This will give you a random.Random() instance with the cloned state.
        '''
        logger.debug('Solving...')
        start = time()
        self.solver.check()
        model = self.solver.model()
        end = time()
        logger.debug(f'Solved! (in {round(end-start,3)}s)')

        #Compute best guess for state
        state = list(map(lambda x: model[x].as_long(), self.MT))
        print(state)
        print(self.index)
        result_state = (3, tuple(state+[self.index]), None)
        r = Random()
        r.setstate(result_state)
        return r
        
def mersenne_invertor(states):
    # compute the last state of the MT
    state_k = states[-1]
    state_0 = states[0]
    state_396 = states[396]
    xA = state_k ^ state_396
    if state_0 & 1:
        xA = xA ^ 0x9908B0DF
    last_state_high = (xA >> 30) & 1

    state_k1 = states[-2]
    state_395 = states[395]
    xA = state_k1 ^ state_395

    if xA >> 31:
        xA = xA ^ 0x9908B0DF
        xA = (xA << 1) | 1
    else:
        xA = xA << 1
    last_state_low = xA & 0x7FFFFFFF
    last_state = (last_state_high << 31) | last_state_low
    return [last_state] + states[:-1]    

def mersenne_twist(states):
    x = (states[0] & 0x80000000) | (states[1] & 0x7FFFFFFF)
    xA = x >> 1
    if x & 1:
        xA = xA ^ 0x9908B0DF
    x = states[397] ^ xA
    states = states[1:] + [x]
    return states


ut = Untwister()

with open("output.txt") as f:
    data = json.load(f)

with open("idx_map.txt") as f:
    idx_map = json.load(f)

for i in range(10000, 70000):
    if idx_map[i] is None:
        if idx_map[i-1] is not None and idx_map[i+1] is not None and idx_map[i+1]-idx_map[i-1] == 2:
            idx_map[i] = idx_map[i-1]+1
    else:
        if idx_map[i-1] is not None:
            if idx_map[i] <= idx_map[i-1]:
                print("Error", i)

start_i = 32000
lll = 6500
shift = idx_map[start_i]
print(shift)
states = [None] * (lll*4)
for i in range(lll*4):
    if idx_map[i+start_i] is not None and idx_map[i+start_i] < lll*4+shift:
        states[idx_map[i+start_i]-shift] = data[i+start_i]

for i in range(lll):
    if states[i] is None:
        ut.submit("?"*32)
    else:
        l = []
        for k in range(29):
            l.append((states[i] >> k) & 1)
        l = l[::-1]
        ut.submit("".join(map(str, l)) + "???")

print("Done submitting")

# init_state = ut.get_init_state()
# print(init_state)

# new_rng = ut.get_random()


new_rng = Random()
result_state = (3, tuple([3108843983, 2957557291, 1205056109, 963679133, 4213298535, 2307291113, 583826039, 683738713, 3147184655, 3986211893, 47696297, 2817148732, 1163487339, 1646593836, 728328938, 170740964, 1294624393, 2739006151, 2341281135, 2061196711, 2776535195, 1755401062, 1996319060, 87075661, 2959594902, 2610027163, 3866692612, 826659084, 3277033270, 3515015412, 3818722066, 1702883488, 976673496, 3534542485, 2229107453, 2100777168, 2353206450, 741217009, 186395582, 1248876942, 2331991691, 801242294, 740325958, 3386781834, 4258110245, 430703218, 1479059957, 717422650, 1819914416, 2719416170, 818470345, 3851141380, 1806992426, 1205749340, 3804506494, 3233465831, 3777364492, 3922363531, 420869624, 1692086956, 338188062, 1281044967, 3850637595, 4103485305, 2395108077, 686917701, 1905785109, 1216309983, 511794803, 2523680489, 542977446, 3864781746, 1685715937, 3577271108, 838929444, 2229780210, 3745507765, 2572149281, 3242354009, 2940843429, 4193674643, 3841222662, 1359202127, 529286505, 3071681283, 1193142882, 149805721, 3182304067, 2040068145, 1299192231, 2333760284, 2430868653, 3093724795, 3508724098, 2211024520, 587172279, 3719614089, 498017373, 3689933428, 3599025868, 3923193971, 3224028845, 1181506302, 331237724, 2220471279, 3793447576, 1567994437, 986885372, 71695884, 187044787, 2583233242, 599708133, 1230769799, 3401418966, 467213864, 2113484322, 1187505599, 3545845258, 1727095504, 3008059849, 1027234086, 1377503538, 2735450464, 2647253413, 104189495, 3901127790, 3687075909, 3608912691, 3454275907, 330248805, 171066957, 2605390117, 2208408418, 1682318802, 1905627336, 1308392150, 2340486253, 3753975370, 2155449411, 3573366625, 3960212422, 451774833, 2073347600, 2965143249, 1611029512, 991177613, 3948025869, 585809979, 196219882, 297252301, 3745216744, 2223389269, 3195170478, 834420859, 1865249833, 2745372251, 931698315, 3794268326, 415324058, 2719774355, 289782378, 1647542667, 1657944710, 1480362326, 2943390161, 4254114478, 960698471, 3076153303, 2572511413, 1458189141, 1626403439, 2959944423, 684793208, 2491307178, 4022423159, 3822952259, 3334613512, 3122189603, 202181990, 571540276, 1195178397, 2225001085, 1264128835, 2390214370, 1076626363, 1054518265, 957783293, 3604107753, 1221801817, 3236525461, 2912314387, 2643358049, 131074275, 2758329978, 2775493105, 1873997132, 1971415949, 4179978796, 2314962918, 1583910728, 3247616422, 1910103557, 2186111574, 1543384128, 64984167, 235374355, 427475454, 1777142537, 2312981733, 3943311764, 1056696521, 2653806387, 1310735634, 129350374, 1706346441, 849705651, 2406692032, 3446261825, 3537966815, 159723769, 523972737, 2458481223, 2762964586, 1493559238, 942936839, 2012270654, 4043115362, 2984206489, 1478778225, 818715091, 4052455706, 4138438221, 2362203117, 3140193229, 1444906984, 2157958549, 4177672837, 932825439, 1559621990, 2597961766, 742814792, 3404384301, 812544611, 3287571702, 1981038295, 4136367865, 1845988902, 975275845, 2356899514, 566699554, 1805624226, 1863398254, 2966545657, 3194253513, 3236744615, 1813060449, 3429731458, 4014198267, 1158374581, 1101224317, 1160155740, 3641240389, 2398477818, 75369080, 298065404, 1518468449, 4189392991, 3827894024, 226285301, 1187516987, 1701754437, 2306652852, 1182726472, 2421566567, 1126103729, 1221131166, 1597773888, 1599154087, 2732854967, 1130252038, 2933026301, 1506148579, 3653829066, 3880856985, 3198011510, 2408366684, 1909177195, 78546186, 1247733053, 132761946, 694998119, 1502760744, 4175147879, 2303418991, 3330797042, 2315209343, 907391436, 2383001523, 2352339869, 1241382904, 2568389053, 3740394263, 906600568, 2033814345, 2919039505, 3544138480, 2268108125, 3916045138, 2403403033, 4014255829, 1132153370, 286729876, 3124518073, 2020112294, 2441661744, 939861784, 1409350539, 105653513, 1827771106, 3681711360, 809480113, 3675673984, 4061144792, 2319111685, 3180229166, 4084393073, 3385245021, 2534520734, 1714066735, 3468846918, 2986467551, 3639571340, 1714589023, 3044175477, 3443540078, 2485550748, 3113692176, 1747618537, 3423703899, 627675132, 3240706940, 823389017, 643055631, 1109196063, 141393275, 1236670555, 3912235825, 2017648588, 2381432710, 2491006403, 629862470, 3250089418, 738011607, 1892154001, 728773834, 2651217569, 1038993085, 1701743071, 3065984369, 3891526836, 1427136540, 1974091967, 314814133, 3088278160, 3704278679, 2520520482, 3856673942, 2859136274, 1874318021, 4012836373, 3420030244, 1869558479, 2942270283, 369064526, 4133202278, 3728678121, 926264665, 2325762032, 4166221748, 4061253994, 2123222769, 3948169425, 1700963067, 3758718335, 1159962977, 2516846864, 494342246, 958361097, 582118428, 2873078046, 3712078737, 2862774064, 1149523655, 2324659675, 4253388563, 2757572462, 1555310768, 633858333, 3292460633, 1069304526, 768357197, 246785256, 429663609, 4086789363, 3154373002, 762355361, 1529460745, 2056842479, 3485529251, 4165340717, 70148849, 3918760990, 2811580442, 115284552, 2670355001, 177375844, 602363937, 3712110186, 2048055337, 1178190849, 1621607493, 2230103248, 2202303284, 3705687821, 4164308334, 3606284043, 2505911606, 169843381, 754146698, 695205142, 255496354, 2726635541, 1346567193, 2551307181, 4130211846, 1205519658, 731032943, 2933786395, 3563180784, 1849447418, 3904262711, 3007480807, 3092169378, 752279847, 3186706385, 4291656022, 3762871044, 974881962, 3642125486, 2144658777, 1386083401, 4100204357, 2854676068, 1931426022, 3258047914, 1931002187, 1617296328, 1268732444, 4221843970, 1601127461, 3661741476, 4018508413, 221422525, 3946973323, 1409500949, 2336054993, 128363445, 1799391738, 415075129, 2168400456, 949352352, 925791493, 1644437486, 602970630, 566161283, 2225863354, 3546991478, 3563255216, 2732377561, 4289842956, 219724937, 2455058480, 3654351464, 1545137228, 1034080420, 4038770408, 4025713685, 2938911971, 1985624570, 3677394868, 959571317, 3940883542, 1436831685, 1994814842, 1782560246, 2932273949, 480001600, 815619026, 1134397672, 402638230, 3377633224, 606202505, 661056949, 677342109, 2774886467, 1614992854, 1878513839, 752405437, 152636233, 1976001494, 1590277595, 114967030, 1585584957, 2294699122, 738147788, 132488324, 1001753313, 2867784460, 1162456124, 2615509650, 3184026316, 3292250616, 2000985391, 2299550162, 3120044615, 986028453, 1153333477, 1982731558, 1284117401, 2793169740, 4104055852, 2413249100, 3919705800, 96899247, 1202147846, 3138947583, 3645790393, 4145365678, 3516106085, 949646357, 619187095, 1599061577, 780323442, 3337600948, 1497059716, 1508140521, 3729778625, 2930719901, 525152385, 1262449069, 2099423004, 237373363, 1982030014, 2695022651, 3871046237, 4170407262, 536603106, 210327888, 3209610007, 2886375767, 2988557168, 3412785919, 1469051379, 3365143113, 2139407081, 2828776806, 86471941, 2893842757, 975926318, 2915098622, 611065162, 2743385388, 1070877629, 3137904413, 2939507038, 631296312, 3738331272, 2226524750, 183564637, 1554433803, 623871721, 3973803482, 1250683284, 1678187465, 1477314045, 2860985887, 1842404005, 3031218962, 3543615184, 246236598, 2589719346, 3248283342, 1450574339, 2900453395, 1213529948, 815748886, 3506192808, 2385158854, 1098575350, 4268956552, 2770989982, 292939784, 1827337695, 2136872711, 2378654540, 3519898093, 2627968959, 947900787, 2667096530, 2943145731, 3535459112, 3862187347, 2449562040, 830123116, 3392996257, 1625050799, 3795456872, 3003798653, 2571355524, 2788462727, 3551607089, 1634427954, 4072722941, 2568618120]+[260]), None)
new_rng.setstate(result_state)

# cnt = 0
# for i in range(lll, 7*lll):
#     num = new_rng.getrandbits(32)
#     if states[i] is not None:
#         cnt += 1
#         assert num>>3 == states[i], (i, num>>3, states[i])
# print(cnt)

states = [3108843983, 2957557291, 1205056109, 963679133, 4213298535, 2307291113, 583826039, 683738713, 3147184655, 3986211893, 47696297, 2817148732, 1163487339, 1646593836, 728328938, 170740964, 1294624393, 2739006151, 2341281135, 2061196711, 2776535195, 1755401062, 1996319060, 87075661, 2959594902, 2610027163, 3866692612, 826659084, 3277033270, 3515015412, 3818722066, 1702883488, 976673496, 3534542485, 2229107453, 2100777168, 2353206450, 741217009, 186395582, 1248876942, 2331991691, 801242294, 740325958, 3386781834, 4258110245, 430703218, 1479059957, 717422650, 1819914416, 2719416170, 818470345, 3851141380, 1806992426, 1205749340, 3804506494, 3233465831, 3777364492, 3922363531, 420869624, 1692086956, 338188062, 1281044967, 3850637595, 4103485305, 2395108077, 686917701, 1905785109, 1216309983, 511794803, 2523680489, 542977446, 3864781746, 1685715937, 3577271108, 838929444, 2229780210, 3745507765, 2572149281, 3242354009, 2940843429, 4193674643, 3841222662, 1359202127, 529286505, 3071681283, 1193142882, 149805721, 3182304067, 2040068145, 1299192231, 2333760284, 2430868653, 3093724795, 3508724098, 2211024520, 587172279, 3719614089, 498017373, 3689933428, 3599025868, 3923193971, 3224028845, 1181506302, 331237724, 2220471279, 3793447576, 1567994437, 986885372, 71695884, 187044787, 2583233242, 599708133, 1230769799, 3401418966, 467213864, 2113484322, 1187505599, 3545845258, 1727095504, 3008059849, 1027234086, 1377503538, 2735450464, 2647253413, 104189495, 3901127790, 3687075909, 3608912691, 3454275907, 330248805, 171066957, 2605390117, 2208408418, 1682318802, 1905627336, 1308392150, 2340486253, 3753975370, 2155449411, 3573366625, 3960212422, 451774833, 2073347600, 2965143249, 1611029512, 991177613, 3948025869, 585809979, 196219882, 297252301, 3745216744, 2223389269, 3195170478, 834420859, 1865249833, 2745372251, 931698315, 3794268326, 415324058, 2719774355, 289782378, 1647542667, 1657944710, 1480362326, 2943390161, 4254114478, 960698471, 3076153303, 2572511413, 1458189141, 1626403439, 2959944423, 684793208, 2491307178, 4022423159, 3822952259, 3334613512, 3122189603, 202181990, 571540276, 1195178397, 2225001085, 1264128835, 2390214370, 1076626363, 1054518265, 957783293, 3604107753, 1221801817, 3236525461, 2912314387, 2643358049, 131074275, 2758329978, 2775493105, 1873997132, 1971415949, 4179978796, 2314962918, 1583910728, 3247616422, 1910103557, 2186111574, 1543384128, 64984167, 235374355, 427475454, 1777142537, 2312981733, 3943311764, 1056696521, 2653806387, 1310735634, 129350374, 1706346441, 849705651, 2406692032, 3446261825, 3537966815, 159723769, 523972737, 2458481223, 2762964586, 1493559238, 942936839, 2012270654, 4043115362, 2984206489, 1478778225, 818715091, 4052455706, 4138438221, 2362203117, 3140193229, 1444906984, 2157958549, 4177672837, 932825439, 1559621990, 2597961766, 742814792, 3404384301, 812544611, 3287571702, 1981038295, 4136367865, 1845988902, 975275845, 2356899514, 566699554, 1805624226, 1863398254, 2966545657, 3194253513, 3236744615, 1813060449, 3429731458, 4014198267, 1158374581, 1101224317, 1160155740, 3641240389, 2398477818, 75369080, 298065404, 1518468449, 4189392991, 3827894024, 226285301, 1187516987, 1701754437, 2306652852, 1182726472, 2421566567, 1126103729, 1221131166, 1597773888, 1599154087, 2732854967, 1130252038, 2933026301, 1506148579, 3653829066, 3880856985, 3198011510, 2408366684, 1909177195, 78546186, 1247733053, 132761946, 694998119, 1502760744, 4175147879, 2303418991, 3330797042, 2315209343, 907391436, 2383001523, 2352339869, 1241382904, 2568389053, 3740394263, 906600568, 2033814345, 2919039505, 3544138480, 2268108125, 3916045138, 2403403033, 4014255829, 1132153370, 286729876, 3124518073, 2020112294, 2441661744, 939861784, 1409350539, 105653513, 1827771106, 3681711360, 809480113, 3675673984, 4061144792, 2319111685, 3180229166, 4084393073, 3385245021, 2534520734, 1714066735, 3468846918, 2986467551, 3639571340, 1714589023, 3044175477, 3443540078, 2485550748, 3113692176, 1747618537, 3423703899, 627675132, 3240706940, 823389017, 643055631, 1109196063, 141393275, 1236670555, 3912235825, 2017648588, 2381432710, 2491006403, 629862470, 3250089418, 738011607, 1892154001, 728773834, 2651217569, 1038993085, 1701743071, 3065984369, 3891526836, 1427136540, 1974091967, 314814133, 3088278160, 3704278679, 2520520482, 3856673942, 2859136274, 1874318021, 4012836373, 3420030244, 1869558479, 2942270283, 369064526, 4133202278, 3728678121, 926264665, 2325762032, 4166221748, 4061253994, 2123222769, 3948169425, 1700963067, 3758718335, 1159962977, 2516846864, 494342246, 958361097, 582118428, 2873078046, 3712078737, 2862774064, 1149523655, 2324659675, 4253388563, 2757572462, 1555310768, 633858333, 3292460633, 1069304526, 768357197, 246785256, 429663609, 4086789363, 3154373002, 762355361, 1529460745, 2056842479, 3485529251, 4165340717, 70148849, 3918760990, 2811580442, 115284552, 2670355001, 177375844, 602363937, 3712110186, 2048055337, 1178190849, 1621607493, 2230103248, 2202303284, 3705687821, 4164308334, 3606284043, 2505911606, 169843381, 754146698, 695205142, 255496354, 2726635541, 1346567193, 2551307181, 4130211846, 1205519658, 731032943, 2933786395, 3563180784, 1849447418, 3904262711, 3007480807, 3092169378, 752279847, 3186706385, 4291656022, 3762871044, 974881962, 3642125486, 2144658777, 1386083401, 4100204357, 2854676068, 1931426022, 3258047914, 1931002187, 1617296328, 1268732444, 4221843970, 1601127461, 3661741476, 4018508413, 221422525, 3946973323, 1409500949, 2336054993, 128363445, 1799391738, 415075129, 2168400456, 949352352, 925791493, 1644437486, 602970630, 566161283, 2225863354, 3546991478, 3563255216, 2732377561, 4289842956, 219724937, 2455058480, 3654351464, 1545137228, 1034080420, 4038770408, 4025713685, 2938911971, 1985624570, 3677394868, 959571317, 3940883542, 1436831685, 1994814842, 1782560246, 2932273949, 480001600, 815619026, 1134397672, 402638230, 3377633224, 606202505, 661056949, 677342109, 2774886467, 1614992854, 1878513839, 752405437, 152636233, 1976001494, 1590277595, 114967030, 1585584957, 2294699122, 738147788, 132488324, 1001753313, 2867784460, 1162456124, 2615509650, 3184026316, 3292250616, 2000985391, 2299550162, 3120044615, 986028453, 1153333477, 1982731558, 1284117401, 2793169740, 4104055852, 2413249100, 3919705800, 96899247, 1202147846, 3138947583, 3645790393, 4145365678, 3516106085, 949646357, 619187095, 1599061577, 780323442, 3337600948, 1497059716, 1508140521, 3729778625, 2930719901, 525152385, 1262449069, 2099423004, 237373363, 1982030014, 2695022651, 3871046237, 4170407262, 536603106, 210327888, 3209610007, 2886375767, 2988557168, 3412785919, 1469051379, 3365143113, 2139407081, 2828776806, 86471941, 2893842757, 975926318, 2915098622, 611065162, 2743385388, 1070877629, 3137904413, 2939507038, 631296312, 3738331272, 2226524750, 183564637, 1554433803, 623871721, 3973803482, 1250683284, 1678187465, 1477314045, 2860985887, 1842404005, 3031218962, 3543615184, 246236598, 2589719346, 3248283342, 1450574339, 2900453395, 1213529948, 815748886, 3506192808, 2385158854, 1098575350, 4268956552, 2770989982, 292939784, 1827337695, 2136872711, 2378654540, 3519898093, 2627968959, 947900787, 2667096530, 2943145731, 3535459112, 3862187347, 2449562040, 830123116, 3392996257, 1625050799, 3795456872, 3003798653, 2571355524, 2788462727, 3551607089, 1634427954, 4072722941, 2568618120]

for _ in range(shift+lll-259+624):
    states = mersenne_invertor(states)

# print(states)

new_rng = Random()
new_rng.setstate((3, tuple(states+[624]), None))
print(new_rng.randrange(0, int(0x13371337*1.337)))

